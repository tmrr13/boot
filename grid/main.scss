@use "sass:math";
@import "./variables";
@import "./mixins/grid";
@import "./mixins/breakpoints";

*,
*::before,
*::after {
  box-sizing: border-box;
}

.container-base {
  @include make-container();
  max-width: $container-max-width;
}

.container-fluid {
  @include make-container();
}

.aem-Grid {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div($grid-gutter-width, -2);
  margin-left: math.div($grid-gutter-width, -2);
}

.aem-Grid > * {
  position: relative;
  width: 100%;
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
}

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    @for $i from 1 through $grid-columns {
      .aem-GridColumn--#{$infix}--#{$i} {
        flex: 0 0 percentage( math.div($i, $grid-columns));
        max-width: percentage( math.div($i, $grid-columns));
      }
    }
    @for $i from 0 through ($grid-columns - 1) {
      @if not ($infix == "" and $i == 0) {
        .aem-GridColumn--offset--#{$infix}--#{$i} {
          $num: math.div($i, $grid-columns);
          margin-left: if($num == 0, 0, percentage($num));
        }
      }
    }
  }
}

@include use-only-desktop() {
  .aem-GridColumn--default--hide {
    display: none;
  }

  .aem-GridColumn--default--newline {
    flex: 0 0 100%;
    margin-left: 0;
    margin-right: 0;
    max-width: 100%;
  }
}

//@include use-only-tablet(map-get($grid-breakpoints, phone), map-get($grid-breakpoints, tablet)) { //uncomment if breakpoint appears tablet 992
//  .aem-GridColumn--tablet--hide {
//    display: none;
//  }
//
//  .aem-GridColumn--tablet--newline {
//    flex: 0 0 100%;
//    margin-left: 0;
//    margin-right: 0;
//    max-width: 100%;
//  }
//}

@include use-only-mobile() {
  .aem-GridColumn--phone--hide {
    display: none;
  }

  .aem-GridColumn--phone--newline {
    flex: 0 0 100%;
    margin-left: 0;
    margin-right: 0;
    max-width: 100%;
  }
}

